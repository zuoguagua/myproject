package com.inspur.ics.client;

import java.io.File;
import java.util.List;

import com.inspur.ics.common.Types.TaskTargetType;
import com.inspur.ics.common.Types.VirtualDeviceConfigFileOperation;
import com.inspur.ics.core.task.TaskIntermediateResult;
import com.inspur.ics.pojo.CpuInfo;
import com.inspur.ics.pojo.Host;
import com.inspur.ics.pojo.VM;
import com.inspur.ics.pojo.VMBackup;
import com.inspur.ics.pojo.VMConfigInfo;
import com.inspur.ics.pojo.VMSnapshot;
import com.inspur.ics.pojo.VNic;
import com.inspur.ics.pojo.VirtualCdrom;
import com.inspur.ics.pojo.VirtualDisk;
import com.inspur.ics.pojo.monitor.VmMonitorInfo;


/**
 * 虚拟机操作接口.
 * @author zuolanhai
 */
@SuppressWarnings({"rawtypes" })
public interface VMService {
    /**
     * 获取指定集群中的虚拟机列表.
     * @param clusterUUID
     *            集群的uuid
     * @return 虚拟机列表
     */
    List<VM> getVMInCluster(String clusterUUID);

    /**
     * 获取所有的虚拟机列表.
     * @return 虚拟机列表
     */
    List<VM> getAll();

    /**
     * 获取所有自定义虚拟机列表，该列表中的虚拟机信息比较简单，结构也比较简单，同时也包含一些其他的信息，比如所在的主机或者集群名称，区别于VM.
     * @param targetType
     *        目标任务类型(如集群、主机、存储、虚拟集群、端口组、虚拟交换机等)
     * @param targetUuid
     *        目标对象uuid
     * @return 自定义虚拟机列表
     */
    List<VM> getVMList(TaskTargetType targetType, String targetUuid);

    /**
     * 根据ISO创建虚拟机. 命名限制：不能包含字母、数字和下划线之外的字符，长度不能超过30位.
     *
     * <pre>
     * VMConfigInfo config = new VMConfigInfo();
     * config.setName(&quot;vm3&quot;);
     * config.setGuestOsLabel(&quot;xp&quot;);
     * config.setIsoPath(&quot;/storage/nfs/winXP.iso&quot;);
     * config.setMaxMem(&quot;500&quot;);
     * config.setVcpus(2);
     * config.setNicType(&quot;e1000&quot;);
     *
     * List&lt;VirtualDisk&gt; vdisks = new ArrayList&lt;VirtualDisk&gt;();
     * VirtualDisk disk = new VirtualDisk();
     * disk.setFileOperation(VirtualDeviceConfigFileOperation.CREATE);
     * disk.setOperation(VirtualDeviceConfigOperation.ADD);
     * disk.setSize(&quot;10&quot;);
     * vdisks.add(disk);
     * disk = new VirtualDisk();
     * disk.setFileOperation(VirtualDeviceConfigFileOperation.CREATE);
     * disk.setOperation(VirtualDeviceConfigOperation.ADD);
     * disk.setSize(&quot;10&quot;);
     * vdisks.add(disk);
     * config.setDisks(vdisks);
     *
     * List&lt;VNic&gt; vnics = new ArrayList&lt;VNic&gt;();
     * VNic vnic = new VNic();
     * vnic.setOperation(VirtualDeviceConfigOperation.ADD);
     * vnic.setAutoGenerated(true);
     *
     * VirtualNet vnet = new DirectNet();
     * vnet.setUuid(&quot;0a028291-bb7f-424a-a973-10b43c360054&quot;);
     *
     * vnic.setVnet(vnet);
     * vnics.add(vnic);
     *
     * vnic = new VNic();
     * vnic.setOperation(VirtualDeviceConfigOperation.ADD);
     * vnic.setAutoGenerated(true);
     *
     * vnet = new Router();
     * vnet.setUuid(&quot;4d38d713-41fb-449f-99c2-6314e119cc55&quot;);
     *
     * vnic.setVnet(vnet);
     * vnics.add(vnic);
     *
     * config.setNics(vnics);
     * </pre>
     * @param vm
     *            虚拟机信息
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult createVMByIso(VM vm);

    /**
     * 打开虚拟机电源.
     * @param vmUUID
     *            虚拟机UUID
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult powerOnVM(String vmUUID);

    /**
     * 关闭虚拟机电源.
     * @param vmUUID
     *            虚拟机uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult powerOffVM(String vmUUID);

    /**
     * 重启虚拟机.
     * @param vmUUID
     *            虚拟机uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult restartVM(String vmUUID);

    /**
     * 暂停虚拟机.
     * @param vmUUID
     *            虚拟机uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult pauseVM(String vmUUID);

    /**
     * 恢复虚拟机.
     * @param vmUUID
     *            虚拟机uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult resumeVM(String vmUUID);

    /**
     * 删除虚拟机.
     * @param vmUUID
     *            虚拟机uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult deleteVM(String vmUUID);

    /**
     * 修改虚拟机配置.
     * 
     * <pre>
     * VMConfigInfo config = new VMConfigInfo();
     * config.setName(&quot;vm_test3&quot;);
     * config.setIsoPath(&quot;/storage/nfs/ubuntu-12.10-server-amd64.iso&quot;);
     * config.setGuestOsLabel(&quot;win7&quot;);
     * config.setMaxMem(&quot;1000&quot;);
     * config.setVcpus(4);
     * config.setBoot(&quot;hd&quot;);
     * config.setUuid(vmUUID);
     * 
     * List&lt;VirtualDisk&gt; vdisks = new ArrayList&lt;VirtualDisk&gt;();
     * VirtualDisk disk = new VirtualDisk();
     * disk.setOperation(VirtualDeviceConfigOperation.REMOVE);
     * disk.setFileOperation(VirtualDeviceConfigFileOperation.DELETE);
     * disk.setName(&quot;dc08f92d-81cf-4b10-bc2a-cbdee0acd318.img&quot;);
     * vdisks.add(disk);
     * 
     * disk = new VirtualDisk();
     * disk.setOperation(VirtualDeviceConfigOperation.ADD);
     * disk.setFileOperation(VirtualDeviceConfigFileOperation.CREATE);
     * // disk.setLabel(&quot;b&quot;);
     * disk.setSize(&quot;20&quot;);
     * vdisks.add(disk);
     * // 支持复制磁盘
     * // disk = new VirtualDisk();
     * // disk.setOperation(VirtualDeviceConfigOperation.ADD);
     * // disk.setFileOperation(VirtualDeviceConfigFileOperation.COPY);
     * // VirtualDisk copyDisk = new VirtualDisk();
     * // copyDisk.setName(&quot;d809cab3-db0b-40d1-b521-11c7b6ec8928.img&quot;);
     * // copyDisk.setDirName(&quot;bb892801-2159-475b-a93a-ecbc826de019&quot;);
     * // disk.setCopiedFrom(copyDisk);
     * // disk.setSize(&quot;10&quot;);
     * // vdisks.add(disk);
     * 
     * config.setDisks(vdisks);
     * 
     * List&lt;VNic&gt; vnics = new ArrayList&lt;VNic&gt;();
     * VNic vnic = new VNic();
     * vnic.setOperation(VirtualDeviceConfigOperation.ADD);
     * vnic.setAutoGenerated(true);
     * 
     * VirtualNet vnet = new DirectNet();
     * vnet.setUuid(&quot;0a028291-bb7f-424a-a973-10b43c360054&quot;);
     * 
     * vnic.setVnet(vnet);
     * vnics.add(vnic);
     * vnic = new VNic();
     * vnic.setOperation(VirtualDeviceConfigOperation.REMOVE);
     * vnic.setMacAddress(&quot;00:16:3e:d0:0c:1c&quot;);
     * vnics.add(vnic);
     * config.setNics(vnics);
     * </pre>
     * @param vm
     *            虚拟机信息
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult modifyVM(VM vm);

    /**
     * 复制虚拟机.
     * @param vmUUID
     *            要复制的虚拟机的uuid
     * @param vmName
     *            复制后的虚拟机的名称，命名限制同ISO创建虚拟机
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult copyVM(String vmUUID, String vmName);

    /**
     * 根据模板创建虚拟机.
     * @param templateUUID
     *            模板的uuid
     * @param vmName
     *            新建的虚拟机名称，命名限制同ISO创建虚拟机
     * @param hostUuid
     *        新建虚拟机所在的主机
     * @param diskList
     *        新建虚拟机的磁盘信息
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult createVMByTemplate(String templateUUID, String vmName,
                                              String hostUuid,
                                              List<VirtualDisk> diskList);

    /**
     * 根据模板批量创建虚拟机.
     * @param templateUUID
     *            模板的uuid
     * @param vmName
     *            批量创建的虚拟机名称前缀
     * @param num
     *            批量创建的虚拟机个数
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult batchCreateVMByTemplate(String templateUUID,
            String vmName, int num);

    /**
     * 获取可迁入虚拟机的主机列表.
     * @param vmUUID
     *            想要迁移的虚拟机uuid
     * @return 主机列表
     */
    List<Host> getAvailableHostsToMigrateVM(String vmUUID);

    /**
     * 迁移虚拟机.
     * @param vmUUID
     *            要迁移的虚拟机uuid
     * @param hostUuid
     *            目的主机的uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult migrateVM(String vmUUID, String hostUuid);

    /**
     * 获取可用主机以重定位虚拟机.
     * @param vmUUID
     *        要重定位的虚拟机uuid
     * @return
     *        主机列表
     */
    List<Host> getAvailableHostsToRelocateVM(String vmUUID);

    /**
     * 重定位虚拟机.
     * @param vmUUID
     *        要迁移的虚拟机uuid
     * @param hostUUID
     *        目的主机的uuid
     * @param diskList
     *        虚拟机所属的虚拟磁盘
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult relocate(String vmUUID, String hostUUID, List<VirtualDisk> diskList);

    /**
     * 获取虚拟机信息.
     * @param vmUUID
     *            虚拟机uuid
     * @return 虚拟机配置信息
     */
    VM getVMInfo(String vmUUID);

    /**
     * 获取虚拟机信息.
     * @param vmName
     *            虚拟机名称
     * @return 虚拟机配置信息
     */
    VM getVMInfoByName(String vmName);

    /**
     * 获取虚拟机的运行信息,主要是性能相关信息以及所在的主机.
     * @param vmUUID
     *            虚拟机uuid
     * @return 虚拟机运行信息VMRuntimeInfo
     */
    VmMonitorInfo getVMRuntimeInfo(String vmUUID);

    /**
     * 打开虚拟机的VNC控制台.
     * @param vmUUID
     *            虚拟机uuid
     * @return jnlp格式的字符串
     */
    String openVncConsole(String vmUUID);

    /**
     * 挂载ISO镜像.
     * @param vmUUID
     *            虚拟机uuid
     * @param cdrom
     *            要挂载的虚拟光驱信息
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult attachCdrom(String vmUUID, VirtualCdrom cdrom);

    /**
     * 卸载虚拟机挂载的ISO镜像（已废弃）.
     * @param vmUUID
     *            虚拟机uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult detachCdrom(String vmUUID);

    /**
     * 热添加磁盘（已废弃）.
     * @param vmUUID
     *            虚拟机uuid
     * @param disk
     *            虚拟机磁盘配置，包含大小、标签（可不填）
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult hotAddDisk(String vmUUID, VirtualDisk disk);

    /**
     * 配置虚拟机内部网卡获取ip的方式，是dhcp还是static，若是static，需配置ip和mask、gateway，该网卡连接的必须是直连网络.
     * （已废弃）
     * @param config
     *            虚拟机配置信息，主要是包含网卡配置信息
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult configDirectNetVNicForVM(VMConfigInfo config);

    /**
     * 挂载usb设备（已废弃）.
     * @param vmUUID
     *            虚拟机uuid
     * @param usbDevice
     *            要挂载的usb设备路径
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult attachUsb(String vmUUID, String usbDevice);

    /**
     * 卸载usb设备（已废弃）.
     * @param vmUUID
     *            虚拟机uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult detachUsb(String vmUUID);

    /**
     * 打开/关闭虚拟机HA.
     * @param vmUUIDs
     *            要批量设置的虚拟机的uuid
     * @param openHA
     *            true表示打开，false表示关闭
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult configHA(String[] vmUUIDs, boolean openHA);

    /**
     * 配置虚拟机是否允许迁移.
     * @param vmUUIDs
     *            要批量设置的虚拟机的uuid
     * @param migratable
     *            true表示允许，false表示不允许
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult configMigratable(String[] vmUUIDs, boolean migratable);

    /**
     * 创建虚拟机快照. 快照命名限制：不能包含字母、数字和下划线之外的字符，长度不超过32位；描述长度不超过64位，可以包含中文
     * @param vmUUID
     *            虚拟机uuid
     * @param snapshot
     *            快照信息，包含名称和描述
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult createSnapshot(String vmUUID, VMSnapshot snapshot);

    /**
     * 恢复快照.
     * @param vmUUID
     *            虚拟机uuid
     * @param snapshotUUID
     *            要恢复的快照uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult revertToSnapshot(String vmUUID, String snapshotUUID);

    /**
     * 删除快照.
     * @param vmUUID
     *            虚拟机uuid
     * @param snapshotUUID
     *            要删除的快照的uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult deleteSnapshot(String vmUUID, String snapshotUUID);

    /**
     * 获取快照列表.
     * @param vmUUID
     *            虚拟机uuid
     * @return 快照列表,包含快照的uuid、名称和描述以及配置信息.
     */
    List<VMSnapshot> getSnapshotsOfVM(String vmUUID);

    /**
     * 热添加网卡(已废弃).
     * 
     * <pre>
     *  VNic vnic = new VNic();
     *  vnic.setAutoGenerated(true);
     *  vnic.setOperation(VirtualDeviceConfigOperation.ADD);
     *  VirtualNet vnet = new DirectNet();
     *  vnet.setUuid(vnet uuid);
     *  vnic.setVnet(vnet);
     * </pre>
     * @param vmUUID
     *            操作的虚拟机uuid
     * @param vnic
     *            添加的网卡信息，需要包含其相关联的网络
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult hotAddVNic(String vmUUID, VNic vnic);

    /**
     * 热扩展磁盘，该磁盘不能是系统盘. 需指定磁盘属性fileOperation为{@link VirtualDeviceConfigFileOperation}中的EDIT
     * （已废弃）
     * <pre>
     *  VirtualDisk disk = new VirtualDisk();
     *  disk.setSize("20");
     *  disk.setFileOperation(VirtualDeviceConfigFileOperation.EDIT);
     *  disk.setUuid(uuid);
     *  disk.setName(disk filename);
     * </pre>
     * @param vmUUID
     *            虚拟机uuid
     * @param disk
     *            要扩张的磁盘信息，需要包含磁盘的uuid，
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult hotResizeDisk(String vmUUID, VirtualDisk disk);

    /**
     * 关闭虚拟机.
     * @param vmUUID
     *            虚拟机uuid
     * @return 任务信息，目前只包含任务id
     */
    TaskIntermediateResult shutdownVM(String vmUUID);

    /**
     * 强制更新虚拟机的业务状态，若该虚拟机正在操作中将更新失败（已废弃）.
     * @param vmUUID
     *            虚拟机uuid
     */
    void forceUpdateVMStatus(String vmUUID);

    /**
     * 获取支持的操作系统列表（已废弃）.
     * @return 操作系统列表
     */
    List<String> getSupportedOS();

    /**
     * 获取指定的操作系统支持的网卡类型，目前最多支持两种：e1000和virtio.
     * @param osType
     *            操作系统类型
     * @return 网卡列表
     */
    List<String> getVNicType(String osType);

    /**
     * 导出虚拟机.
     * @param vmUUID
     *        要导出的虚拟机UUID
     * @param filePath
     *        导出的文件路径
     * @return 任务信息
     */
    TaskIntermediateResult exportVM(String vmUUID, String filePath);

    /**
     * 导入虚拟机.
     * @param vm
     *        要导入的虚拟机
     * @param filePath
     *        虚拟机所在的文件路径
     * @return 任务信息
     */
    TaskIntermediateResult importVM(VM vm, String filePath);

    /**
     * 获取ova文件列表.
     * @return 任务信息
     */
    List<File> getOvaFiles();

    /**
     * 获取ova文件配置信息.
     * @param hostUUID
     *        主机uuid
     * @param filePath
     *        ova文件路径
     * @return 虚拟机信息
     */
    VM getOvaFileConfig(String hostUUID, String filePath);

    /**
     * 获取cpu和虚拟机绑定信息.
     * @param hostUuid
     *        主机uuid
     * @return cpu信息
     */
    List<CpuInfo> getCpuAndBindedVM(String hostUuid);

    /**打开FT模式.
     * @param vmUUID
     *        要操作的虚拟机uuid
     * @param hostUuid
     *        所属主机的uuid
     * @return 任务信息
     */
    TaskIntermediateResult openFTMode(String vmUUID, String hostUuid);

    /**
     * 关闭FT模式.
     * @param vmUUID
     *        要操作的虚拟机uuid
     * @return 任务信息
     */
    TaskIntermediateResult closeFTMode(String vmUUID);

    /**
     * 备份虚拟机快照.
     * @param vmUUID
     *        要操作的虚拟机uuid
     * @param snapshotUUID
     *        要备份的快照uuid
     * @param dsUuid
     *        目的存储的uuid
     * @param backup
     *        快照的备份信息
     * @return 任务信息
     */
    TaskIntermediateResult backupSnapshot(String vmUUID, String snapshotUUID, String dsUuid,
            VMBackup backup);

    /**
     * 恢复备份.
     * @param vmUUID
     *        要操作的虚拟机uuid
     * @param vmBackupUuid
     *        要恢复的备份uuid
     * @return 任务信息
     */
    TaskIntermediateResult revertBackup(String vmUUID, String vmBackupUuid);

    /**
     * 获取虚拟机备份列表.
     * 4.0版本仅保留虚拟机的一个备份
     * @param vmUUID
     *        要操作的虚拟机uuid
     * @return 虚拟机备份列表
     */
    List<VMBackup> getBackupsOfVm(String vmUUID);
    /**
     * 批量配置虚拟机ha次数.
     * @param vmUUIDs
     *        选择的虚拟机uuid列表
     * @param maxHaLimit
     *        虚拟机HA的最大次数
     * @return 任务信息
     */
    TaskIntermediateResult configMaxHaLimit(String[] vmUUIDs, int maxHaLimit);
}
