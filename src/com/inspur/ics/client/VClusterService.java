package com.inspur.ics.client;

import java.util.List;

import com.inspur.ics.core.task.TaskIntermediateResult;
import com.inspur.ics.pojo.VCluster;
import com.inspur.ics.pojo.VM;
import com.inspur.ics.pojo.VMConfigInfo;

/**
 * 虚拟集群服务接口，主要完成添加、获取、删除等.
 * @author zuolanhai
 *
 */
public interface VClusterService {
    /**
     * 创建虚拟集群. 命名限制：不能包含字母、数字和下划线之外的字符，长度不能超过32位.
     * @param vcluster
     *        虚拟集群信息
     * @return 返回任务信息
     */
    TaskIntermediateResult createVCluster(VCluster vcluster);
    /**
     * 从虚拟集群模板创建虚拟集群. 命名限制：不能包含字母、数字和下划线之外的字符，长度不能超过32位.
     * @param vclusterName
     *            虚拟集群名称
     * @param templateUUID
     *            模板uuid
     * @return 返回任务信息
     */
    TaskIntermediateResult createVClusterByTemplate(String vclusterName, String templateUUID);

    /**
     * 虚拟集群中ISO创建虚拟机. 命名限制：不能包含字母、数字和下划线之外的字符，长度不能超过30位.
     * <pre>
     * VMConfigInfo config = new VMConfigInfo();
        config.setName("vm3");
        config.setGuestOsLabel("xp");
        config.setIsoPath("/storage/nfs/winXP.iso");
        config.setMaxMem("500");
        config.setVcpus(2);
        config.setNicType("e1000");

        List<VirtualDisk> vdisks = new ArrayList<VirtualDisk>();
        VirtualDisk disk = new VirtualDisk();
        disk.setFileOperation(VirtualDeviceConfigFileOperation.CREATE);
        disk.setOperation(VirtualDeviceConfigOperation.ADD);
        disk.setSize("10");
        vdisks.add(disk);
        disk = new VirtualDisk();
        disk.setFileOperation(VirtualDeviceConfigFileOperation.CREATE);
        disk.setOperation(VirtualDeviceConfigOperation.ADD);
        disk.setSize("10");
        vdisks.add(disk);
        config.setDisks(vdisks);

        List<VNic> vnics = new ArrayList<VNic>();
        VNic vnic = new VNic();
        vnic.setOperation(VirtualDeviceConfigOperation.ADD);
        vnic.setAutoGenerated(true);

        VirtualNet vnet = new DirectNet();
        vnet.setUuid("0a028291-bb7f-424a-a973-10b43c360054");

        vnic.setVnet(vnet);
        vnics.add(vnic);

        vnic = new VNic();
        vnic.setOperation(VirtualDeviceConfigOperation.ADD);
        vnic.setAutoGenerated(true);

        vnet = new Router();
        vnet.setUuid("4d38d713-41fb-449f-99c2-6314e119cc55");

        vnic.setVnet(vnet);
        vnics.add(vnic);

        config.setNics(vnics);
     * </pre>
     * @param vclusterUUID
     *            虚拟集群uuid
     * @param config
     *            虚拟机配置，里面的磁盘和网卡需要传递mac，需要指定operation,具体范围{@link Types.VirtualDeviceConfigOperation}
     * @return 返回任务信息
     */
    TaskIntermediateResult createVMByIsoInVCluster(String vclusterUUID, VMConfigInfo config);

    /**
     * 虚拟集群中模板创建虚拟机.
     * @param vclusterUUID
     *            虚拟集群uuid
     * @param templateUUID
     *            虚拟机模板uuid
     * @param vmName
     *            虚拟机名称
     * @return 返回任务信息
     */
//    TaskIntermediateResult createVMByTemplateInVCluster(String vclusterUUID, String templateUUID,
//            String vmName);

    /**
     * 虚拟集群中复制创建虚拟机.
     * @param vclusterUUID
     *           虚拟集群uuid
     * @param beCopiedVMUUID
     *            待复制的虚拟机uuid
     * @param newVMName
     *            新的虚拟机名称
     * @return 返回任务信息
     */
//    TaskIntermediateResult copyVMInVCluster(String vclusterUUID, String beCopiedVMUUID, String newVMName);

    /**
     * 虚拟集群中批量创建虚拟机.
     * @param vclusterUUID
     *            虚拟集群uuid
     * @param templateUUID
     *            虚拟机模板uuid
     * @param prefixName
     *            批量创建虚拟机命名前缀
     * @param num
     *            批量创建虚拟机的个数
     * @return 返回任务信息
     */
//    TaskIntermediateResult batchCreateVMByTemplateInVCluster(String vclusterUUID, String templateUUID,
//            String prefixName, int num);

    /**
     * 获取虚拟集群下的虚拟机.
     * @param vclusterUUID
     *        要操作的虚拟集群uuid
     * @return 虚拟机列表
     */
    List<VM> getVmInVCluster(String vclusterUUID);

    /**
     * 获取所有虚拟集群列表.
     * @return 虚拟集群列表
     */
    List<VCluster> getVClusterList();
    /**
     * 删除虚拟集群中指定虚拟机.
     * @param vclusterUUID
     *            虚拟集群uuid
     * @param vmUUID
     *            虚拟机uuid
     * @return 返回任务信息
     */
    TaskIntermediateResult deleteVMInVCluster(String vclusterUUID, String vmUUID);

    /**
     * 获得指定集群中的所有虚拟集群.
     * @param clusterUUID 集群uuid
     * @return 虚拟集群列表
     */
//    List<VCluster> getVClustersInCluster(String clusterUUID);

    /**
     * 获取虚拟集群信息.
     * @param vclusterUUID 虚拟集群uuid
     * @return 虚拟集群对象
     */
    VCluster getVClusterInfo(String vclusterUUID);
    /**
     * 获取虚拟集群信息.
     * @param vclusterName 虚拟集群名称
     * @return 虚拟集群对象
     */
    VCluster getVClusterInfoByName(String vclusterName);

    /**
     * 复制虚拟集群. 命名限制：不能包含字母、数字和下划线之外的字符，长度不能超过32位.
     * @param vclusterName
     *            新的虚拟集群名称
     * @param vclusterUUID
     *           待复制的虚拟集群uuid
     * @return 返回任务信息
     */
    TaskIntermediateResult copyVCluster(String vclusterUUID, String vclusterName);

    /**
     * 删除虚拟集群.
     * @param vclusterUUID
     *            虚拟集群uuid
     * @return 返回任务信息
     */
    TaskIntermediateResult deleteVCluster(String vclusterUUID);

    /**
     * 获取可移入指定虚拟集群的虚拟机列表.
     * @return 获取可移入虚拟机列表.
     */
    List<VM> getVMsCanBeMovedIn();

    /**
     * 虚拟集群中移入指定虚拟机列表.
     * @param vclusterUUID
     *            虚拟集群uuid
     * @param vms
     *            待移入的虚拟机列表
     * @return 返回任务信息
     */
    TaskIntermediateResult moveVMInVCluster(String vclusterUUID, List<String> vms);

    /**
     *移出虚拟集群中指定的虚拟机.
     * @param vclusterUUID
     *             虚拟集群uuid
     * @param vmUUID
     *            待移出的虚拟机uuid
     * @return 返回任务信息
     */
    TaskIntermediateResult moveVMOutVCluster(String vclusterUUID, String vmUUID);

    /**
     * 打开虚拟集群电源.
     * @param vclusterUUID
     *             虚拟集群uuid
     * @return 返回任务信息
     */
    TaskIntermediateResult powerOnVCluster(String vclusterUUID);

    /**
     * 关闭虚拟集群电源.
     * @param vclusterUUID
     *             虚拟集群uuid
     * @return 返回任务信息
     */
    TaskIntermediateResult powerOffVCluster(String vclusterUUID);

    /**
     *重启虚拟集群.
     * @param vclusterUUID
     *             虚拟集群uuid
     * @return 返回任务信息
     */
    TaskIntermediateResult restartVCluster(String vclusterUUID);

    /**
     * 关闭虚拟集群.
     * @param vclusterUUID
     *           虚拟集群uuid
     * @return 返回任务信息
     */
    TaskIntermediateResult shutdownVCluster(String vclusterUUID);
    /**
     * 修改虚拟集群.
     * @param vcluster
     *        要操作的虚拟集群对象
     * @return 返回任务信息
     */
    TaskIntermediateResult modifyVCluster(VCluster vcluster);
}
